@model Tree;
@{
    ViewData["Title"] = "Home Page";
}

<link rel="stylesheet" href="/lib/bootstrap/dist/css/bootstrap.css" />
<style>
    .letter {
        color: red;
        font-size: 200%;
    }

    ol {
        list-style-type: none
    }
</style>

<div>
    <h1 class="display-4"> Ступень 2 - Добавить на страницу фильтры по свойствам курса - полям Subject, Grade, Genre.</h1>
    <div class="panel-body">
        <form class="form-row" asp-action="Tree" method="post">
            <div class="form-group m-1 p-2">
                <label asp-for="subject">Subject</label>
                <select asp-for="subject">
                    <option value="">Выберите subject</option>
                    @{
                        List<string> subjects = Model.courses.Select(x => x.Subject).Distinct().ToList();
                        foreach (string item in subjects)
                        {
                            <option value="@item">@item</option>
                        }
                    }
                </select>
            </div>

            <div class="form-group m-1 p-2">
                <label asp-for="grade">Grade</label>
                <select asp-for="grade">
                    <option value="">Выберите grade</option>
                    @{
                        List<int> grades = Model.courses.Select(x => x.Grade).Distinct().ToList();
                        foreach (int item in grades)
                        {
                            <option value="@item">@item</option>
                        }
                    }
                </select>
            </div>

            <div class="form-group m-1 p-2">
                <label asp-for="genre">Genre</label>
                <select asp-for="genre">
                    <option value="">Выберите genre</option>
                    @{
                        List<string> genres = Model.courses.Select(x => x.Genre).Distinct().ToList();
                        foreach (string item in genres)
                        {
                            <option value="@item">@item</option>
                        }
                    }
                </select>
            </div>

            <div class="text-center m-1 p-2">
                <button class="btn btn-primary" type="submit">
                    Применить
                </button>
            </div>
        </form>
    </div>
    <h1 class="display-4">Ступень 1 - Вывести на страницу данные в древовидной форме.</h1>
    @{
        ModuleTree moduleTree = Model.moduleTree;
        foreach (Module root in moduleTree.roots)
        {
            Course course = Model.courses.Where(x => x.id == root.CourseId).FirstOrDefault();
            <hr />
            <h2>@course.Title</h2>
            <hr />
            Stack<Module> stack = new Stack<Module>();
            Dictionary<Module, byte> nodes = moduleTree.adjacencyList.Keys.ToDictionary(x => x, x => (byte)0);

            stack.Push(root);

            List<Module> subNodes;
            moduleTree.ResetNumberOfSubNodesPassed();

            while (stack.Count != 0)
            {

                Module node = stack.Pop();
                nodes[node] = 2;

                Module parent = moduleTree.getParent(node);


                if (moduleTree.firstChild(node))
                {
                    @Html.Raw("<ol>")
                }

                if (node.ParentId is not null)
                {
                    moduleTree.subNodePassed(node);
                }

                <li>
                    <span class="letter">@node.num</span> @node.Title @node.Id
                </li>

                if (moduleTree.lastChild(node))
                {
                    @Html.Raw("</ol>")
                    moduleTree.numberOfSubNodesPassed.Remove(parent);
                }

                subNodes = moduleTree.adjacencyList[node];

                if (subNodes.Count != 0)
                    moduleTree.numberOfSubNodesPassed.Add(node, subNodes.Count);

                subNodes.Reverse();
                foreach (Module item in subNodes)
                {
                    if (nodes[item] == 0)
                    {
                        stack.Push(item);
                        nodes[item] = 1;
                    }
                }
            }
        }
    }
</div>